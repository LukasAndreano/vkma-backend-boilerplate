name: Build and deploy to server

on:
  push:
    branches:
      - test # replace in production

jobs:
  docker:
    name: Create docker image and push to registry, then start image
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1
      - name: Cache Docker layers
        uses: actions/cache@v2
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-
      - name: Login to registry
        uses: docker/login-action@v2
        with:
          context: .
          registry: ${{ secrets.REGISTRY_URL }}
          username: ${{ secrets.REGISTRY_LOGIN }}
          password: ${{ secrets.REGISTRY_PASSWORD }}
      - name: Build and push
        uses: docker/build-push-action@v4
        with:
          push: true
          tags: ${{ secrets.REGISTRY_URL }}/${{ github.event.repository.name }}:latest
        env:
          DOCKER_BUILDKIT: 1
      - name: Move cache
        run: |
          rm -rf /tmp/.buildx-cache
          mv /tmp/.buildx-cache-new /tmp/.buildx-cache
      - name: Install SSH key
        uses: shimataro/ssh-key-action@v2
        with:
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          known_hosts: 'just-a-placeholder-so-we-dont-get-errors'
      - name: Adding Known Hosts
        run: ssh-keyscan -H ${{ secrets.SSH_HOST }} >> ~/.ssh/known_hosts
      - name: Pull image and run container with .env variables from secrets
        uses: appleboy/ssh-action@v0.1.6
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          port: 22
          script: |
            docker login ${{ secrets.REGISTRY_URL }} -u ${{ secrets.REGISTRY_LOGIN }} -p ${{ secrets.REGISTRY_PASSWORD }} &&
            docker pull ${{ secrets.REGISTRY_URL }}/${{ github.event.repository.name }}:latest &&
            docker stop ${{ github.event.repository.name }} || true &&
            docker rm ${{ github.event.repository.name }} || true &&
            echo -e "${{ secrets.ENV }}" > env.list &&
            docker run --restart=always --env-file ./env.list --net=host -d -p ${{ secrets.RUN_PORT }}:${{ secrets.RUN_PORT }} --name=${{ github.event.repository.name }} ${{ secrets.REGISTRY_URL }}/${{ github.event.repository.name }}:latest &&
            docker image prune --filter="dangling=true" -f
